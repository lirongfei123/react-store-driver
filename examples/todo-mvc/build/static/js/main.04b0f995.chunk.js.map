{"version":3,"sources":["todosStore.js","TodoItem.jsx","App.jsx","index.js"],"names":["todos","store","all","filter","isEmpty","length","completed","todo","hasCompleted","allCompleted","every","forEach","active","create","title","push","remove","id","splice","toggle","toggleAll","clearCompleted","view","_ref","_ref$completed","itemClass","classNames","react_default","a","createElement","className","type","checked","onChange","onClick","changeFilter","ev","target","value","createTodo","keyCode","todosClass","selected","completedClass","activeClass","onKeyUp","placeholder","autoFocus","htmlFor","map","idx","TodoItem","Object","assign","key","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.04b0f995.chunk.js","sourcesContent":["import { store } from 'react-easy-state'\n\n// a complex global store with a lot of derived data (getters and setters)\n// use 'todos' instead of 'this' in the store methods to make them passable as callbacks\nconst todos = store({\n  all: [],\n  filter: 'all',\n  get isEmpty () {\n    return todos.all.length === 0\n  },\n  get completed () {\n    return todos.all.filter(todo => todo.completed)\n  },\n  get hasCompleted () {\n    return todos.completed.length !== 0\n  },\n  get allCompleted () {\n    return todos.all.every(todo => todo.completed)\n  },\n  set allCompleted (completed) {\n    todos.all.forEach(todo => {\n      todo.completed = completed\n    })\n  },\n  get active () {\n    return todos.all.filter(todo => !todo.completed)\n  },\n  create (title) {\n    todos.all.push({ title })\n  },\n  remove (id) {\n    todos.all.splice(id, 1)\n  },\n  toggle (id) {\n    const todo = todos.all[id]\n    todo.completed = !todo.completed\n  },\n  toggleAll () {\n    todos.allCompleted = !todos.allCompleted\n  },\n  clearCompleted () {\n    todos.all = todos.active\n  }\n})\n\nexport default todos\n","import React from 'react'\nimport classNames from 'classnames'\nimport { view } from 'react-easy-state'\nimport todos from './todosStore'\n\n// this is re-rendered whenever the relevant parts of the used data stores change\nexport default view(({ id, title, completed = false }) => {\n  const itemClass = classNames({ view: true, completed })\n\n  return (\n    <li className={itemClass}>\n      <input\n        className='toggle'\n        type='checkbox'\n        checked={completed}\n        onChange={() => todos.toggle(id)}\n      />\n      <label>{title}</label>\n      <button onClick={() => todos.remove(id)} className='destroy' />\n    </li>\n  )\n})\n","import React from 'react'\nimport classNames from 'classnames'\nimport { view } from 'react-easy-state'\nimport TodoItem from './TodoItem'\nimport todos from './todosStore'\n\n// these functions mutate the global store\n// abstracting away events and view specific details here is a nice practice\n// the global store methods should only handle pure data\nfunction changeFilter (ev) {\n  todos.filter = ev.target.value\n}\n\n// create a todo on Enter key press\nfunction createTodo (ev) {\n  if (ev.keyCode === 13 && ev.target.value) {\n    todos.create(ev.target.value)\n    ev.target.value = ''\n  }\n}\n\n// this is re-rendered whenever the relevant parts of the used data stores change\nexport default view(() => {\n  const {\n    isEmpty,\n    hasCompleted,\n    allCompleted,\n    active,\n    filter,\n    toggleAll,\n    clearCompleted\n  } = todos\n\n  const todosClass = classNames({ selected: filter === 'all' })\n  const completedClass = classNames({ selected: filter === 'completed' })\n  const activeClass = classNames({ selected: filter === 'active' })\n\n  return (\n    <div className='todoapp'>\n      <header className='header'>\n        <h1>todos</h1>\n        <input\n          onKeyUp={createTodo}\n          className='new-todo'\n          placeholder='What needs to be done?'\n          autoFocus\n        />\n      </header>\n\n      {!isEmpty && (\n        <section className='main'>\n          <input\n            className='toggle-all'\n            type='checkbox'\n            checked={allCompleted}\n            onChange={toggleAll}\n          />\n          <label htmlFor='toggle-all'>Mark all as complete</label>\n          <ul className='todo-list'>\n            {todos[filter].map((todo, idx) => (\n              <TodoItem {...todo} id={idx} key={idx} />\n            ))}\n          </ul>\n        </section>\n      )}\n\n      {!isEmpty && (\n        <footer className='footer'>\n          <span className='todo-count'>{active.length} items left</span>\n          <div className='filters'>\n            <button className={todosClass} value='all' onClick={changeFilter}>\n              All\n            </button>\n            <button\n              className={activeClass}\n              value='active'\n              onClick={changeFilter}\n            >\n              Active\n            </button>\n            <button\n              className={completedClass}\n              value='completed'\n              onClick={changeFilter}\n            >\n              Completed\n            </button>\n          </div>\n          {hasCompleted && (\n            <button className='clear-completed' onClick={clearCompleted}>\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </div>\n  )\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}