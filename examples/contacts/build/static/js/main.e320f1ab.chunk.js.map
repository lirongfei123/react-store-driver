{"version":3,"sources":["appStore.js","Contact.jsx","ContactCreator.jsx","App.jsx","index.js"],"names":["appStore","store","contacts","addContact","contact","name","email","push","deleteContact","idx","indexOf","splice","Contact","_ref","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onEdit","compStore","editing","onDelete","props","onSave","assign","currentContact","onCancel","onChange","ev","target","value","_this$compStore","react_default","a","createElement","className","autoFocus","onClick","Component","view","ContactCreator","newContact","placeholder","map","src_Contact","key","src_ContactCreator","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.e320f1ab.chunk.js","sourcesContent":["import { store } from 'react-easy-state'\n\n// store the central data and logic of the application in a global app store\n// use 'appStore' instead of 'this' in the store methods to make them passable as callbacks\nconst appStore = store({\n  contacts: [],\n  addContact (contact) {\n    contact.name = contact.name || 'Placeholder'\n    contact.email = contact.email || 'Placeholder'\n    appStore.contacts.push(contact)\n  },\n  deleteContact (contact) {\n    const idx = appStore.contacts.indexOf(contact)\n    appStore.contacts.splice(idx, 1)\n  }\n})\n\nexport default appStore\n","import React, { Component } from 'react'\nimport { view, store } from 'react-easy-state'\nimport appStore from './appStore'\n\nclass Contact extends Component {\n  constructor ({ contact }) {\n    super()\n\n    // save internal utility data in component store instead of the global store\n    // editing is boolean meta flag, which indicates if the contact is currently edited\n    // currentContact is a temporary state of the contact during editing, which can be saved or cancelled\n    this.compStore = store({\n      currentContact: Object.assign({}, contact),\n      editing: false\n    })\n  }\n\n  onEdit = () => {\n    this.compStore.editing = true\n  };\n\n  onDelete = () => {\n    appStore.deleteContact(this.props.contact)\n  };\n\n  // transfer finalized changes from the component store to the app store\n  onSave = () => {\n    // mutating the store with Object.assign is possible, but it is generally hard to reason about and debug\n    Object.assign(this.props.contact, this.compStore.currentContact)\n    this.compStore.editing = false\n  };\n\n  // cancel changes by reverting to data from the main store\n  onCancel = () => {\n    // mutating the store with Object.assign is possible, but it is generally hard to reason about and debug\n    Object.assign(this.compStore.currentContact, this.props.contact)\n    this.compStore.editing = false\n  };\n\n  onChange = ev => {\n    this.compStore.currentContact[ev.target.name] = ev.target.value\n  };\n\n  // render is triggered whenever the relevant parts of the component store, app store or props change\n  render () {\n    const { onChange, onSave, onCancel, onEdit, onDelete } = this\n    const { currentContact, editing } = this.compStore\n    const { contact } = this.props\n\n    if (!editing) {\n      return (\n        <tr className='contact-display'>\n          <td>{contact.name}</td>\n          <td>{contact.email}</td>\n          <td>\n            <button onClick={onEdit}>\n              <i className='zmdi zmdi-edit' />\n            </button>\n            <button onClick={onDelete}>\n              <i className='zmdi zmdi-delete' />\n            </button>\n          </td>\n        </tr>\n      )\n    }\n\n    return (\n      <tr className='contact-editor'>\n        <td>\n          <input\n            name='name'\n            value={currentContact.name}\n            onChange={onChange}\n            autoFocus\n          />\n        </td>\n        <td>\n          <input\n            name='email'\n            value={currentContact.email}\n            onChange={onChange}\n          />\n        </td>\n        <td>\n          <button onClick={onSave}>\n            <i className='zmdi zmdi-save' />\n          </button>\n          <button onClick={onCancel}>\n            <i className='zmdi zmdi-close' />\n          </button>\n        </td>\n      </tr>\n    )\n  }\n}\n\n// wrap the component with view() before exporting it\nexport default view(Contact)\n","import React, { Component } from 'react'\nimport { view, store } from 'react-easy-state'\nimport appStore from './appStore'\n\nclass ContactCreator extends Component {\n  // save internal utility data in component store, instead of the app store\n  // newContact is the skeleton for the next contact before it is added to the list\n  compStore = store({\n    newContact: { name: '', email: '' }\n  });\n\n  // transfer finalized contact from the component store to the app store\n  addContact = () => {\n    appStore.addContact(this.compStore.newContact)\n    this.compStore.newContact = { name: '', email: '' }\n  };\n\n  onChange = ev => {\n    const { newContact } = this.compStore\n    newContact[ev.target.name] = ev.target.value\n  };\n\n  // render is triggered whenever the relevant parts of the component store or app store change\n  render () {\n    const { addContact, onChange } = this\n    const { newContact } = this.compStore\n\n    return (\n      <tr className='contact-creator'>\n        <td>\n          <input\n            name='name'\n            value={newContact.name}\n            onChange={onChange}\n            placeholder='Contact name...'\n          />\n        </td>\n        <td>\n          <input\n            name='email'\n            value={newContact.email}\n            onChange={onChange}\n            placeholder='Contact email...'\n          />\n        </td>\n        <td>\n          <button onClick={addContact}>Add Contact</button>\n        </td>\n      </tr>\n    )\n  }\n}\n\n// wrap the component with view() before exporting it\nexport default view(ContactCreator)\n","import React from 'react'\nimport { view } from 'react-easy-state'\nimport Contact from './Contact'\nimport ContactCreator from './ContactCreator'\nimport appStore from './appStore'\n\n// this re-renders whenever the appStore.contacts array changes (elements pushed or deleted)\nexport default view(() => {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Email</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        {appStore.contacts.map(contact => (\n          <Contact contact={contact} key={contact.email} />\n        ))}\n        <ContactCreator />\n      </tbody>\n    </table>\n  )\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}